{
	"title": "ECMAScript: ES.next versus ES 6 versus ES Harmony",
	"text": "Update 2011-04-18: Rewrote this blog post, renamed it from “A brief history of ECMAScript versions (including Harmony and ES.next)”.\n\nThis blog post explains the difference between JavaScript and ECMAScript. And the differences between ECMAScript.next, ECMAScript 6 and ECMAScript Harmony.\n\nA little ECMAScript glossary\n\nYou should know the following terms related to the standardization of JavaScript.\n\nECMAScript: Sun (now Oracle) had a trademark on the name “Java” and therefore also on the name “JavaScript”. That led to Microsoft calling its JavaScript dialect “JScript”. Thus, when it came to standardizing the language, a different name had to be used. “ECMAScript” was chosen, because the corresponding standard is hosted by Ecma International (see below). Usually, the terms “ECMAScript” and “JavaScript” are interchangeable. If JavaScript means “ECMAScript as implemented by Mozilla and others” then ECMAScript is the standard and JavaScript its implementation. The term “ECMAScript” is also used to describe language versions (such as ECMAScript 5).\n\nECMA-262: The Ecma International (a standards organization) has created the ECMA-262 standard which is the official specification of the ECMAScript language.\n\nECMAScript 5: If one talks about ECMAScript 5, one means the 5th edition of ECMA-262, the current edition of this standard.\n\nEcma’s Technical Committee 39 (TC39): is the group of people (Brendan Eich and others) who develop the ECMA-262 standard.\n\nHistory of ECMAScript versions\n\nThe following are the most currently relevant chapters in ECMAScript’s history:\n\nECMAScript 3 (December 1999). This is the version of ECMAScript that most browsers support today. It introduced many features that have become an inherent part of the language: [...] regular expressions, better string handling, new control statements, try/catch exception handling, tighter definition of errors, formatting for numeric output and other enhancements. [1]\n\nECMAScript 4 (abandoned July 2008). ECMAScript 4 was developed as the next version of JavaScript, with a prototype written in ML. However, TC39 could not agree on its feature set. To prevent an impasse, the committee met at the end of July 2008 and came to an accord, summarized in four points [2]:\n\nDevelop an incremental update of ECMAScript (which became ECMAScript 5).\n\nDevelop a major new release, which was to be more modest than ECMAScript 4, but much larger in scope than the version after ECMAScript 3. This version has been code-named Harmony, due to the nature of the meeting in which it was conceived.\n\nFeatures from ECMAScript 4 that would be dropped: packages, namespaces, early binding.\n\nOther ideas were to be developed in consensus with all of TC39.\n\nThus: The ECMAScript 4 developers agreed to make Harmony less radical than ECMAScript 4, the rest of TC39 agreed to keep moving things forward.\n\nECMAScript 5 (December 2009). This version brings several enhancements to the standard library and even updated language semantics via a strict mode. [3]\n\nECMAScript.next (planned for 2013). It quickly became apparent that the plans for Harmony were too ambitious, so its features were split into two groups: Group one are features that are considered for the next version after ECMAScript 5. This version has the code name ECMAScript.next and will probably become ECMAScript 6. Group two are Harmony features that are not considered ready or high-priority enough for ECMAScript.next. Those will still make it into ECMAScript, e.g. as part of ECMAScript.next.next. The current goal is to have ECMAScript.next finished by 2013, with parts of it making it into web browsers (especially Firefox) before then.\n\nSummary\n\nECMAScript versus JavaScript. ECMAScript is the language standard. JavaScript is one implementation, Microsoft’s JScript is another one.\n\nUpcoming versions of ECMAScript:\n\nECMAScript.next is the code name of the next version of ECMAScript. Using that term implies that one is discussing features that may or may not be added to the final standard.\n\nECMAScript 6 is the actual (final) name of ECMAScript.next. Using that term implies that one is talking about features that will definitely be in the standard.\n\nECMAScript Harmony is a superset of ECMAScript.next and means “features coming up after ECMAScript 5”. Those features may be in ECMAScript.next, in ECMAScript.next.next or in even later versions."
}
